# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi 
# ... just reach by the recipe name
[buildout]
parts =  
    instance
    zopepy
    i18ndude
    zopeskel
    test
    i18n-build
#    omelette

extends = 
    http://good-py.appspot.com/release/dexterity/1.0.3?plone=4.1

i18n-domain = plone.formwidget.recurrence
package-dir = plone/formwidget/recurrence

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.1
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
    buildout.dumppickedversions
    buildout.threatlevel

sources = sources
	
versions = versions

# Reference any folders where you have Python egg source code under development here 
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a 
# repository mr.developer will handle this automatically for you
develop = .

# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage

eggs =
	Plone
	PIL
	plone.app.dexterity
        plone.formwidget.recurrence[archetypes,z3cform,test]

# Some pre-Plone 3.3 packages may need you to register the package name here in 
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =


# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['-s', 'plone.formwidget.recurrence', '--auto-color', '--auto-progress']
eggs =
    ${instance:eggs}

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    ${instance:eggs}

[i18n-build]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/i18n-build
mode = 755
input = inline:
    #!/bin/sh
    buildoutdir="${buildout:directory}"
    pkgdir="${buildout:package-dir}"
    i18ndude="$buildoutdir/bin/i18ndude"
    domain="${buildout:i18n-domain}"

    potfile="$pkgdir/locales/$domain.pot"

    echo ""
    echo "SYNC LANGUAGES"
    for langdir in `find $pkgdir/locales -type d -depth 1`; do
        pofile="$langdir/LC_MESSAGES/$domain.po"
        cmd="$i18ndude sync --pot $potfile $pofile"
        echo ""
        echo "> $cmd"
        $cmd
        mv $pofile $pofile.orig && cat $pofile.orig | sed -e '/^\"Language-[CN].*$/d' -e '/^\"Domain.*$/d' > $pofile && rm $pofile.orig
    done

    for lang in $@; do
        pofile="$pkgdir/locales/$lang/LC_MESSAGES/$domain.po"
        echo ""
        cmd="mkdir -p `dirname $pofile`"
        echo "> $cmd"
        $cmd

        cmd="touch $pofile"
        echo "> $cmd"
        $cmd

        cmd="$i18ndude sync --pot $potfile $pofile"
        echo "> $cmd"
        $cmd
        mv $pofile $pofile.orig && cat $pofile.orig | sed -e '/^\"Language-[CN].*$/d' -e '/^\"Domain.*$/d' > $pofile && rm $pofile.orig
    done

    echo ""
    echo "(pass new language code as argument, e.g. ./bin/i18n-buld de)"

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build 
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
# [omelette]
# recipe = collective.recipe.omelette
# eggs = ${instance:eggs}

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
collective.developermanual = svn http://svn.plone.org/svn/collective/collective.developermanual

# Version pindowns for new style products go here - this section extends one provided in http://dist.plone.org/release/
[versions]
